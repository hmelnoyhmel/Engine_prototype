#pragma once
#include <d3d12.h>
#include <wrl.h>
#include <vector>
#include <array>

//#include "DirectCommandList.h"
#include "DirectConstantBuffer.h"
#include "DirectIndexBuffer.h"
#include "DirectVertexBuffer.h"
#include "DirectPSO.h"

#include "SimpleMath.h"

using namespace DirectX::SimpleMath;
using namespace Microsoft::WRL;

class DirectPSO;
class DirectCommandList;

class DirectMesh
{
public:

	// Model is general class for every game model user provides
	// It handles vertex and index buffers, textures and other resources
	// User will create this one, everything else is created automatically

	// All resources are generated by it

	struct Vertex
	{
		Vector3 Pos;
		Vector4 Color;
	};

	DirectMesh(DirectDevice& device, DirectCommandList& list);
	void CompileShaders();
	void Update(DirectCommandList& list);

	void Draw(DirectCommandList& list);

private:

	std::array<Vertex, 13> vertices;
	std::array<std::uint16_t, 54> indices;

	std::vector<std::shared_ptr<DirectPSO>> psos;
	std::shared_ptr<DirectIndexBuffer>  indexBuffer;
	std::shared_ptr<DirectVertexBuffer> vertexBuffer;

	ComPtr<ID3DBlob> vsByteCode;
	ComPtr<ID3DBlob> psByteCode;
	std::vector<D3D12_INPUT_ELEMENT_DESC> inputLayout;

	std::shared_ptr<DirectConstantBuffer> cameraCB;
	std::shared_ptr<DirectConstantBuffer> objectCB;


	struct alignas(sizeof(Vector4)) CameraData
	{
		Matrix View; 
		Matrix InvView; 
		Matrix Proj; 
		Matrix InvProj;
		Matrix ViewProj;
		Matrix InvViewProj;
	};

	struct alignas(sizeof(Vector4)) ObjectData
	{
		Matrix World;
	};

	Vector3 position = { 0, 0, 0 };
	Vector3 eulerRotation = { 0, 0, 0 };
	Vector3 scale = { 1, 1, 1 };
};